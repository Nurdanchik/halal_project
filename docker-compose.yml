version: '3.9'

networks:
  dev:

volumes:
  static_volume:
    name: tour_static_volume
  media_volume:
    name: tour_media_volume
  redis_data:  # <--- добавили volume под Redis
  # postgres_data:
  # rabbitmq_data:

services:
  # region --------------- APPS -------------
  user.api:
    container_name: user.api
    build:
      context: src
      dockerfile: Dockerfile
    depends_on:
      - postgres.db
      - redis  # <--- подключаем Redis
    restart: unless-stopped
    networks:
      - dev
    volumes:
      - static_volume:/usr/src/app/static/
      - media_volume:/usr/src/app/media/
    environment:
      - REDIS_URL=redis://redis:6379/1  # <--- переменная для Django

  postgres.db:
    image: postgres:17.2-alpine
    container_name: postgres.db
    restart: unless-stopped
    networks:
      - dev
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  redis:
    image: redis:7
    container_name: redis-store
    restart: unless-stopped
    volumes:
      - redis_data:/data/
    networks:
      - dev

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/usr/src/app/static/
      - media_volume:/usr/src/app/media/
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - user.api
    networks:
      - dev

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot -w /var/www/certbot
      --email placetest00@gmail.com
      --agree-tos --no-eff-email --force-renewal
      --non-interactive --quiet -d zahalal.ru
      -d www.zahalal.ru && nginx -s reload && sleep 89d"
    networks:
      - dev